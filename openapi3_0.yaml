openapi: 3.0.0
info:
  title: Lost and Found System API
  version: 1.0.0
  description: API for managing lost and found items, auctions, and user accounts.

servers:
  - url: https://api.lostandfound.com/v1

tags:
  - name: User Management
    description: Operations related to user accounts
  - name: Lost Items
    description: Operations for managing lost items
  - name: Found Items
    description: Operations for managing found items
  - name: Police Operations
    description: Operations specific to police functionalities
  - name: Auctions
    description: Auction related operations

paths:
  /users:
    post:
      tags:
        - User Management
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input

  /users/login:
    post:
      tags:
        - User Management
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string 
      responses:
        '200':
          description: Login successful
        '401':
          description: Authentication failed

  /users/{userId}:
    put:
      summary: Edit user account details
      tags:
        - User Management
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User details updated
        '404':
          description: User not found

    delete:
      summary: Remove a user account
      tags:
        - User Management
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User account removed
        '404':
          description: User not found

  /users/{userId}/status:
    put:
      summary: Update user account status (deactivate/reactivate)
      tags:
        - User Management
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: boolean # campo 'ativo'
      responses:
        '200':
          description: User account status updated
        '404':
          description: User not found

  /items/compare/{lostItemId}/{foundItemId}:
    get:
      summary: Compare a lost item with a found item
      tags:
        - Lost Items
        - Found Items
      parameters:
        - in: path
          name: lostItemId
          required: true
          schema:
            type: integer 
        - in: path
          name: foundItemId
          required: true
          schema:
            type: integer 
      responses:
        '200':
          description: Comparison result between lost and found item
          content:
            application/json:
              schema:
                type: object
                properties:
                  similarities:
                    type: array
                    items:
                      type: string
                  differences:
                    type: array
                    items:
                      type: string

  /items/found:
    get:
      tags:
        - Found Items
      summary: Search for found items
      parameters:
        - in: query
          name: description
          schema:
            type: string
          required: false
          description: Description of the item
      responses:
        '200':
          description: List of found items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoundItem'

  /items/lost/{itemId}/history:
    get:
      summary: View history of a lost item
      tags:
        - Lost Items
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: integer 
      responses:
        '200':
          description: History of the lost item
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date-time
                    status:
                      type: string

  /items/found/{itemId}/deliver:
    post:
      summary: Register delivery of a found item to its owner
      tags:
        - Found Items
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: integer 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ownerId:
                  type: integer 
                deliveryDate:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Found item delivery registered
        '404':
          description: Item not found
  /police/posts:
    post:
      tags:
        - Police Operations
      summary: Register a new police post
      description: This endpoint registers a new police post by providing the required address (morada) information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - morada
              properties:
                morada:
                  type: string
                  description: The address of the new police post.
      responses:
        '201':
          description: Police post created successfully. Returns the ID of the newly created post.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: integer
        '400':
          description: Invalid input. The "morada" field is missing or is not a valid string.
        '500':
          description: Server error while creating the police post.

  /police/members:
    post:
      tags:
        - Police Operations
      summary: Register a new police member
      description: Adds a new member to the police database. The system automatically generates a unique ID for each new member.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nome
                - posto_policia
              properties:
                nome:
                  type: string
                  description: The full name of the police member.
                posto_policia:
                  type: integer
                  description: The reference ID to an existing police station record.
                historico_policia:
                  type: string
                  description: A JSON formatted string detailing the police member's history.
      responses:
        '201':
          description: Police member registered successfully. Returns the ID of the newly registered member.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: integer
        '400':
          description: Invalid input, required fields are missing or incorrect type of data was provided.
        '500':
          description: Internal server error. Indicates a server-side error that prevented the member from being registered.


  /police/items/found/register:
    post:
      tags:
        - Police Operations
      summary: Register a found item by police
      description: This endpoint allows police to register items that have been found. It requires detailed item information and returns an ID of the newly registered item if successful.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoundItem'
      responses:
        '201':
          description: Found item registered successfully. Returns the ID of the newly registered item.
        '400':
          description: Invalid input. One or more of the required fields are missing or malformed.
        '500':
          description: Internal server error. Indicates a server-side error that prevented the item from being registered.


  /police/items/{itemId}/claim:
    put:
      tags:
        - Police Operations
      summary: Claim a found item
      description: Claims an active item as found by updating its status.
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: integer
          description: The unique identifier of the item to claim.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                claimantId:
                  type: integer
                  description: The unique identifier of the user claiming the item.
      responses:
        '200':
          description: Item claimed successfully.
        '400':
          description: Invalid input, itemId or claimantId must be integers.
        '404':
          description: Item not found or already claimed.
        '500':
          description: Server error while claiming the item.

  /auctions:
    get:
      tags:
        - Auctions
      summary: Get list of auctions
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [active, upcoming, past] 
          required: false
          description: Filter auctions by status (active, upcoming, past)
      responses:
        '200':
          description: A list of auctions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auction'

  /auctions/history:
    get:
      summary: View auction history
      tags:
        - Auctions
      parameters:
        - in: query
          name: userId
          schema:
            type: integer # Changed to integer for user ID
          description: User ID to filter auctions participated in
      responses:
        '200':
          description: List of past auctions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auction'

  /auctions/{auctionId}/notify:
    post:
      summary: Subscribe to auction notifications
      tags:
        - Auctions
      parameters:
        - in: path
          name: auctionId
          required: true
          schema:
            type: integer # Changed to integer for auction ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer 
      responses:
        '200':
          description: Successfully subscribed to notifications
        '404':
          description: Auction not found

  /auctions/{auctionId}/notify/cancel:
    post:
      summary: Cancel auction notifications
      tags:
        - Auctions
      parameters:
        - in: path
          name: auctionId
          required: true
          schema:
            type: integer 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
      responses:
        '200':
          description: Successfully cancelled notifications
        '404':
          description: Auction not found

  /auctions/{auctionId}/pay:
    post:
      summary: Process payment for an auctioned item
      tags:
        - Auctions
      parameters:
        - in: path
          name: auctionId
          required: true
          schema:
            type: integer # Changed to integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bidderId:
                  type: integer # Changed to integer
                amount:
                  type: number
      responses:
        '200':
          description: Payment processed successfully
        '404':
          description: Auction not found

  /reports/items:
    get:
      summary: Get report of lost and found items
      tags:
        - Reports
      parameters:
        - in: query
          name: startDate
          description: Start date for filtering the report by the date items were reported lost.
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          description: End date for filtering the report by the date items were reported lost.
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Report of lost and found items with statistics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  lost_and_found_items:
                    type: array
                    items:
                      type: object
                      properties:
                        itemId:
                          type: integer
                        descricao:
                          type: string
                        categoria:
                          type: string
                        localizacao_perdido:
                          type: string
                        encontrado:
                          type: boolean
                        foundItem:
                          type: object
                          nullable: true
                          properties:
                            itemId:
                              type: integer
                            descricao:
                              type: string
                            categoria:
                              type: string
                            localizacao_achado:
                              type: string
                            data_achado:
                              type: string
                              format: date-time
                        data_perdido:
                          type: string
                          format: date-time
                  stats:
                    type: object
                    properties:
                      totalLost:
                        type: integer
                      totalFound:
                        type: integer
                      lostToFoundRatio:
                        type: number
                      averageTimeToFind:
                        type: string
        '400':
          description: Invalid date format or logical inconsistency in dates.
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: No items found for the given date range.
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error while retrieving data.
          content:
            text/plain:
              schema:
                type: string

  /reports/auctions:
    get:
      summary: Get auction statistics report
      tags:
        - Reports
      parameters:
        - in: query
          name: startDate
          required: true
          description: The start date for the auction report range.
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          required: true
          description: The end date for the auction report range.
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Auction statistics report successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    auctionId:
                      type: integer
                      description: The unique identifier of the auction.
                    totalBids:
                      type: integer
                      description: The total number of bids placed in the auction.
                    highestBid:
                      type: number
                      description: The highest bid value in the auction.
                    averageBid:
                      type: number
                      description: The average bid value in the auction.
        '400':
          description: Invalid date format or start date is after the end date.
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: No auctions found for the given date range.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No auctions found for the given date range.
        '500':
          description: Internal server error while retrieving data.
          content:
            text/plain:
              schema:
                type: string

  /reports/user-activity/{userId}:
    get:
      summary: Get report of user activity
      tags:
        - Reports
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer 
      responses:
        '200':
          description: User activity report
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalItemsLost:
                    type: integer
                    description: The total number of items reported lost by the user.
                  auctionsParticipated:
                    type: integer
                    description: The number of unique auctions in which the user has participated.
        '400':
          description: Invalid user ID format. User ID must be an integer.
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: User not found or inactive.
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error.
          content:
            text/plain:
              schema:
                type: string

components:
  schemas:
    PolicePost:
      type: object
      properties:
        name:
          type: string
        identifier:
          type: string 
        address:
          type: string

    Auction:
      type: object
      properties:
        auctionId: 
          type: integer 
        startingPrice:
          type: number
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time

    Bid:
      type: object
      properties:
        auctionID:
          type: integer 
        bidderID:
          type: integer 
        amount:
          type: number
        timestamp:
          type: string
          format: date-time

    User:
      type: object
      properties:
        userId: 
          type: integer 
        name:
          type: string
        email:
          type: string
        password:
          type: string

    LostItem:
      type: object
      properties:
        itemId: 
          type: integer 
        description:
          type: string
        category:
          type: string
        location:
          type: string
        dateLost:
          type: string
          format: date

    FoundItem:
      type: object
      properties:
        itemId: 
          type: integer 
        description:
          type: string
        location:
          type: string
        dateFound:
          type: string
          format: date

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

security:
  - ApiKeyAuth: []
