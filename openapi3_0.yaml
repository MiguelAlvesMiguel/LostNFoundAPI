openapi: 3.0.0
info:
  title: Lost and Found System API
  version: 1.0.0
  description: API for managing lost and found items, auctions, and user accounts.

servers:
  - url: https://api.lostandfound.com/v1

tags:
  - name: User Management
    description: Operations related to user accounts
  - name: Lost Items
    description: Operations for managing lost items
  - name: Found Items
    description: Operations for managing found items
  - name: Police Operations
    description: Operations specific to police functionalities
  - name: Auctions
    description: Auction related operations

paths:
  /users:
    post:
      tags:
        - User Management
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input

  /users/login:
    post:
      tags:
        - User Management
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string 
      responses:
        '200':
          description: Login successful
        '401':
          description: Authentication failed

  /users/{userId}:
    put:
      summary: Edit user account details
      tags:
        - User Management
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User details updated
        '404':
          description: User not found

    delete:
      summary: Remove a user account
      tags:
        - User Management
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User account removed
        '404':
          description: User not found

  /users/{userId}/status:
    put:
      summary: Update user account status (deactivate/reactivate)
      tags:
        - User Management
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: boolean # campo 'ativo'
      responses:
        '200':
          description: User account status updated
        '404':
          description: User not found

  /items/compare/{lostItemId}/{foundItemId}:
    get:
      summary: Compare a lost item with a found item
      tags:
        - Lost Items
        - Found Items
      parameters:
        - in: path
          name: lostItemId
          required: true
          schema:
            type: integer 
        - in: path
          name: foundItemId
          required: true
          schema:
            type: integer 
      responses:
        '200':
          description: Comparison result between lost and found item
          content:
            application/json:
              schema:
                type: object
                properties:
                  similarities:
                    type: array
                    items:
                      type: string
                  differences:
                    type: array
                    items:
                      type: string

  /items/found:
    get:
      tags:
        - Found Items
      summary: Search for found items
      parameters:
        - in: query
          name: description
          schema:
            type: string
          required: false
          description: Description of the item
      responses:
        '200':
          description: List of found items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoundItem'

  /items/lost/{itemId}/history:
    get:
      summary: View history of a lost item
      tags:
        - Lost Items
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: integer 
      responses:
        '200':
          description: History of the lost item
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date-time
                    status:
                      type: string

  /items/found/{itemId}/deliver:
    post:
      summary: Register delivery of a found item to its owner
      tags:
        - Found Items
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: integer 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ownerId:
                  type: integer 
                deliveryDate:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Found item delivery registered
        '404':
          description: Item not found

  /police/posts:
      get:
        tags:
          - Police Operations
        summary: Retrieve all police posts
        description: Fetches a list of all police posts.
        responses:
          '200':
            description: Successful retrieval of police posts
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The ID of the police post
                      nome:
                        type: string
                        description: The name of the police post
                      localizacao:
                        type: string
                        description: The location of the police post
          '500':
            description: Server error while retrieving police posts
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Server error while retrieving police posts.
      post:
        tags:
          - Police Operations
        summary: Register a new police post
        description: This endpoint registers a new police post by providing the required address (morada) information.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - morada
                properties:
                  morada:
                    type: string
                    description: The address of the new police post.
        responses:
          '201':
            description: Police post created successfully. Returns the ID of the newly created post.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    id:
                      type: integer
          '400':
            description: Invalid input. The "morada" field is missing or is not a valid string.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          '500':
            description: Server error while creating the police post.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string

  /police/posts/edit/{postId}:
    put:
      tags:
        - Police Operations
      summary: Edit an existing police post
      description: Updates the information of an existing police post in the database.
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
          description: The unique ID of the police post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - morada
              properties:
                morada:
                  type: string
                  description: The address of the police post.
      responses:
        '200':
          description: Police post updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid input. The "morada" field is missing or is not a valid string.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          description: Police post not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Server error while updating the police post.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /police/users:
    get:
      tags:
        - Police Operations
      summary: Get a list of all active users
      description: Allows police members to get a list of all active users to choose which reports to view. Only accessible to authenticated police members.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of all active users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    firebase_uid:
                      type: string
                      description: The Firebase UID of the user
                      example: '2iqHRiu39lOI1lbwKq9f12q4dIB3'
                    nome:
                      type: string
                      description: The name of the user
                      example: 'John Doe'
                    genero:
                      type: string
                      description: The gender of the user
                      example: 'Masculino'
                    data_nasc:
                      type: string
                      format: date
                      description: The birth date of the user
                      example: '1990-01-15'
                    morada:
                      type: string
                      description: The address of the user
                      example: '1234 Main St, Lisbon'
                    email:
                      type: string
                      description: The email of the user
                      example: 'john.doe@example.com'
                    telemovel:
                      type: string
                      description: The phone number of the user
                      example: '+351 912 345 678'
                    historico:
                      type: string
                      description: The history of the user
                      example: 'Some history text'
                    ativo:
                      type: boolean
                      description: Whether the user is active
                      example: true
                    isCop:
                      type: boolean
                      description: Whether the user is a police member
                      example: false
                    isAdmin:
                      type: boolean
                      description: Whether the user is an admin
                      example: false
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Forbidden Access restricted to police members only
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /police/posts/delete/{postId}:
    delete:
      tags:
        - Police Operations
      summary: Delete a police post
      description: Deletes a police post from the database if the post exists.
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
          description: The unique ID of the police post to delete.
      responses:
        '200':
          description: Police post deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Police post not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Server error while deleting the police post.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /police/members:
    get:
      summary: Retrieve all police members
      tags:
        - Police Operations
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of police members
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    utilizador_id:
                      type: string
                      example: "82DAQSh6eXMbnN90lLhIL0Ks8R12"
                    posto_policia:
                      type: integer
                      example: 1
                    historico_policia:
                      type: object
                      example: 
                        yearsService: 10
                        commendations: ["Bravery", "Long Service"]
                    nome:
                      type: string
                      example: "John Doe"
                    genero:
                      type: string
                      example: "Masculino"
                    data_nasc:
                      type: string
                      format: date
                      example: "1990-01-01"
                    morada:
                      type: string
                      example: "1234 Main St, Lisbon"
                    email:
                      type: string
                      example: "johndoe@example.com"
                    telemovel:
                      type: string
                      example: "+351 912 345 678"
        '500':
          description: Server error while retrieving police members
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Server error while retrieving police members
    post:
      tags:
        - Police Operations
      summary: Register a new police member
      description: Adds a new member to the police database, registering them in both the `Utilizador` and `MembroPolicia` tables. The system automatically generates a unique ID for each new member. Requires admin authentication.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - nome
                - genero
                - data_nasc
                - morada
                - telemovel
                - posto_policia
              properties:
                email:
                  type: string
                  description: The email address of the police member.
                password:
                  type: string
                  description: The password for the police member.
                nome:
                  type: string
                  description: The full name of the police member.
                genero:
                  type: string
                  description: The gender of the police member.
                data_nasc:
                  type: string
                  format: date
                  description: The birth date of the police member.
                morada:
                  type: string
                  description: The address of the police member.
                telemovel:
                  type: string
                  description: The phone number of the police member.
                posto_policia:
                  type: integer
                  description: The ID of the police station where the member is assigned.
                historico_policia:
                  type: object
                  description: A JSON object detailing the police member's history.
      responses:
        '201':
          description: Police member registered successfully. Returns the ID of the newly registered member and an access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: integer
                  accessToken:
                    type: string
        '400':
          description: Invalid input, required fields are missing or incorrect type of data was provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error. Indicates a server-side error that prevented the member from being registered.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /police/members/edit/{firebaseUid}:
      put:
        summary: Edit a police member's details
        tags:
          - Police Operations
        security:
          - BearerAuth: []
        parameters:
          - name: firebaseUid
            in: path
            required: true
            description: The Firebase UID of the police member
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  posto_policia:
                    type: integer
                    description: The ID of the police station
                  historico_policia:
                    type: object
                    description: A JSON object detailing the police member's history
                    example:
                      yearsService: 12
                      commendations: 
                        - Bravery
                        - Excellence
        responses:
          '200':
            description: Police member updated successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Police member updated successfully
          '400':
            description: Invalid input
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Invalid input
          '404':
            description: User not found or inactive / Police member not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: User not found or inactive / Police member not found
          '500':
            description: Server error while updating police member
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Server error while updating police member

  /police/members/delete/{firebaseUid}:
    delete:
      summary: Delete a police member and associated user
      parameters:
        - name: firebaseUid
          in: path
          required: true
          description: The Firebase UID of the police member
          schema:
            type: string
      responses:
        '200':
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Police member and associated user deleted successfully
        '400':
          description: Invalid firebaseUid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid firebaseUid. It must be a valid string.
        '404':
          description: User not found or inactive
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: One of 'User not found or inactive.' or 'Police member not found.'
 
        '500':
          description: Server error while deleting police member
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Server error while deleting police member.

  /police/items/found/register:
    post:
      tags:
        - Police Operations
      summary: Register a found item by police. if a lost item is found, it will be marked as inactive.
      description: This endpoint allows police to register items that have been found. It requires detailed item information and returns an ID of the newly registered item if successful. If there is a correspondent lost item, it will set its ativo field to false.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                titulo:
                  type: string
                  description: The title of the found item.
                descricao_curta:
                  type: string
                  description: A short description of the found item.
                descricao:
                  type: string
                  description: A detailed description of the found item.
                categoria:
                  type: string
                  description: The category of the found item.
                data_achado:
                  type: string
                  format: date
                  description: The date the item was found.
                localizacao_achado:
                  type: string
                  description: The location where the item was found in JSON format.
                data_limite:
                  type: string
                  format: date
                  description: The deadline date for claiming the found item.
                valor_monetario:
                  type: number
                  description: The estimated monetary value of the found item.
                imageurl:
                  type: string
                  description: The URL of the image of the found item.
      responses:
        '201':
          description: Found item registered successfully. Returns the ID of the newly registered item.
        '400':
          description: Invalid input. One or more of the required fields are missing or malformed.
        '404':
          description: Police member not found.
        '500':
          description: Internal server error. Indicates a server-side error that prevented the item from being registered.


  /police/items/{itemId}/claim:
    put:
      tags:
        - Police Operations
      summary: Claim a found item
      description: Claims an active item as found by updating its ativo attribute, the claimantId and the data_claimed in the table objetoAchado.
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: integer
          description: The unique identifier of the item to claim.
        - in: query
          name: claimantId
          required: true
          schema:
            type: integer
          description: The unique identifier of the user claiming the item.
      responses:
        '200':
          description: Item claimed successfully.
        '400':
          description: Invalid input, itemId or claimantId must be integers.
        '404':
          description: Claimant not found or item not found or already claimed.
        '500':
          description: Server error while claiming the item.


  /auctions:
    get:
      tags:
        - Auctions
      summary: Get list of auctions
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [active, upcoming, past] 
          required: false
          description: Filter auctions by status (active, upcoming, past)
      responses:
        '200':
          description: A list of auctions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auction'

  /auctions/history:
    get:
      summary: View auction history
      tags:
        - Auctions
      parameters:
        - in: query
          name: userId
          schema:
            type: integer # Changed to integer for user ID
          description: User ID to filter auctions participated in
      responses:
        '200':
          description: List of past auctions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auction'

  /auctions/{auctionId}/notify:
    post:
      summary: Subscribe to auction notifications
      tags:
        - Auctions
      parameters:
        - in: path
          name: auctionId
          required: true
          schema:
            type: integer # Changed to integer for auction ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer 
      responses:
        '200':
          description: Successfully subscribed to notifications
        '404':
          description: Auction not found

  /auctions/{auctionId}/notify/cancel:
    post:
      summary: Cancel auction notifications
      tags:
        - Auctions
      parameters:
        - in: path
          name: auctionId
          required: true
          schema:
            type: integer 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
      responses:
        '200':
          description: Successfully cancelled notifications
        '404':
          description: Auction not found

  /auctions/{auctionId}/pay:
    post:
      summary: Process payment for an auctioned item
      tags:
        - Auctions
      parameters:
        - in: path
          name: auctionId
          required: true
          schema:
            type: integer # Changed to integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bidderId:
                  type: integer # Changed to integer
                amount:
                  type: number
      responses:
        '200':
          description: Payment processed successfully
        '404':
          description: Auction not found

  /reports/items:
    get:
      summary: Get report of lost and found items
      tags:
        - Reports
      parameters:
        - in: query
          name: startDate
          description: Start date for filtering the report by the date items were reported lost.
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          description: End date for filtering the report by the date items were reported lost.
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Report of lost and found items with statistics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  lost_and_found_items:
                    type: array
                    items:
                      type: object
                      properties:
                        itemId:
                          type: integer
                        descricao:
                          type: string
                        categoria:
                          type: string
                        localizacao_perdido:
                          type: string
                        encontrado:
                          type: boolean
                        foundItem:
                          type: object
                          nullable: true
                          properties:
                            itemId:
                              type: integer
                            descricao:
                              type: string
                            categoria:
                              type: string
                            localizacao_achado:
                              type: string
                            data_achado:
                              type: string
                              format: date-time
                        data_perdido:
                          type: string
                          format: date-time
                  stats:
                    type: object
                    properties:
                      totalLost:
                        type: integer
                      totalFound:
                        type: integer
                      lostToFoundRatio:
                        type: number
                      averageTimeToFind:
                        type: string
        '400':
          description: Invalid date format or logical inconsistency in dates.
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: No items found for the given date range.
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error while retrieving data.
          content:
            text/plain:
              schema:
                type: string

  /reports/statistics:
    get:
      summary: Retrieve average statistics of lost and found objects per month
      responses:
        '200':
          description: Successful retrieval of statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  averageObjectsLostPerMonth:
                    type: string
                    format: float
                    description: Average number of objects lost per month
                  averageObjectsFoundPerMonth:
                    type: string
                    format: float
                    description: Average number of objects found per month
        '500':
          description: Server error while retrieving statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Server error while retrieving statistics.

  /reports/auctions:
    get:
      summary: Get auction statistics report
      tags:
        - Reports
      parameters:
        - in: query
          name: startDate
          required: true
          description: The start date for the auction report range.
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          required: true
          description: The end date for the auction report range.
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Auction statistics report successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    auctionId:
                      type: integer
                      description: The unique identifier of the auction.
                    totalBids:
                      type: integer
                      description: The total number of bids placed in the auction.
                    highestBid:
                      type: number
                      description: The highest bid value in the auction.
                    averageBid:
                      type: number
                      description: The average bid value in the auction.
        '400':
          description: Invalid date format or start date is after the end date.
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: No auctions found for the given date range.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No auctions found for the given date range.
        '500':
          description: Internal server error while retrieving data.
          content:
            text/plain:
              schema:
                type: string

  /reports/user-activity/{userId}:
    get:
      summary: Get user activity report
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalItemsLost:
                    type: integer
                    description: Total number of lost items by the user
                  lostItemsDetails:
                    type: array
                    description: Details of the lost items
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The ID of the lost item
                        titulo:
                          type: string
                          description: The title of the lost item
                        descricao:
                          type: string
                          description: The description of the lost item
                        data_perda:
                          type: string
                          format: date
                          description: The date the item was lost
                        localizacao:
                          type: string
                          description: The location where the item was lost
                  auctionsParticipated:
                    type: integer
                    description: Total number of auctions the user participated in
                  auctionsDetails:
                    type: array
                    description: Details of the auctions participated in
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The ID of the auction
                        titulo:
                          type: string
                          description: The title of the auction
                        descricao:
                          type: string
                          description: The description of the auction
                        data_inicio:
                          type: string
                          format: date
                          description: The start date of the auction
                        data_fim:
                          type: string
                          format: date
                          description: The end date of the auction
                        valor_base:
                          type: number
                          format: float
                          description: The base value of the auction
                        localizacao:
                          type: string
                          description: The location of the auction
        '404':
          description: User not found or inactive
        '500':
          description: Internal server error

  /reports/found-objects/{firebaseUid}:
      get:
        summary: Retrieve found objects by a police officer
        parameters:
          - name: firebaseUid
            in: path
            required: true
            description: The Firebase UID of the police officer
            schema:
              type: string
        responses:
          '200':
            description: Successful retrieval of found objects
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The ID of the found object
                      localizacao_achado:
                        type: object
                        description: The location where the object was found
                      data_limite:
                        type: string
                        format: date
                        description: The deadline date for the object
                      ativo:
                        type: boolean
                        description: Whether the object is active
                      valor_monetario:
                        type: number
                        format: float
                        description: The monetary value of the object
                      policial_id:
                        type: integer
                        description: The ID of the police officer who found the object
                      data_achado:
                        type: string
                        format: date
                        description: The date the object was found
                      titulo:
                        type: string
                        description: The title of the found object
                      descricao_curta:
                        type: string
                        description: A short description of the found object
                      descricao:
                        type: string
                        description: A detailed description of the found object
                      categoria:
                        type: string
                        description: The category of the found object
                      imageurl:
                        type: string
                        description: The URL of the image of the found object
          '400':
            description: Invalid firebaseUid
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Invalid firebaseUid. It must be a valid string.
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: One of 'User not found or inactive.' or 'Police member not found.'
          '500':
            description: Server error while retrieving found objects
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Server error while retrieving found objects.
  /stripe/create-checkout-session:
    post:
      summary: Create a Stripe Checkout Session
      description: Creates a new Stripe Checkout Session for a given payment ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pagamento_id:
                  type: integer
                  description: The ID of the payment.
              required:
                - pagamento_id
      responses:
        '200':
          description: Successfully created checkout session
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The ID of the Stripe Checkout Session.
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message

  /stripe/add-pagamento:
    post:
      summary: Add a new payment record
      description: Adds a new payment record to the Pagamento table with ativo set to false.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                licitacao_id:
                  type: integer
                  description: The ID of the auction.
                utilizador_id:
                  type: string
                  description: The Firebase UID of the user.
                valor:
                  type: number
                  format: float
                  description: The amount of the payment.
              required:
                - licitacao_id
                - utilizador_id
                - valor
      responses:
        '200':
          description: Successfully added payment record
          content:
            application/json:
              schema:
                type: object
                properties:
                  licitacao_id:
                    type: integer
                  utilizador_id:
                    type: string
                  valor:
                    type: number
                    format: float
                  ativo:
                    type: boolean
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message

  /stripe/update-pagamento:
    post:
      summary: Update a payment record
      description: Updates the ativo field to true for a given payment ID after a successful payment.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pagamento_id:
                  type: integer
                  description: The ID of the payment.
              required:
                - pagamento_id
      responses:
        '200':
          description: Successfully updated payment record
          content:
            application/json:
              schema:
                type: object
                properties:
                  licitacao_id:
                    type: integer
                  utilizador_id:
                    type: string
                  valor:
                    type: number
                    format: float
                  ativo:
                    type: boolean
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
        
  /police/auctions:
    get:
      summary: Retrieve auctions based on their status
      tags:
        - Auctions
      parameters:
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: [past, active, future]
          description: Type of auctions to retrieve (past, active, future)
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auction'
        '400':
          description: Invalid type parameter
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      security:
        - bearerAuth: []
  /auctions/auctions/{auctionId}/highest-bidder:
    get:
      summary: Get the highest bidder of an auction
      description: Retrieve the highest bidder for a given auction
      parameters:
        - name: auctionId
          in: path
          required: true
          description: ID of the auction
          schema:
            type: integer
      responses:
        '200':
          description: Highest bidder retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  utilizador_id:
                    type: string
                    description: ID of the user who placed the highest bid
                  valor_licitacao:
                    type: number
                    description: Value of the highest bid
        '404':
          description: No bids found for this auction
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
      security:
        - bearerAuth: []

  /auctions/auction-history:
    get:
      summary: Get auction history for logged-in user
      description: Retrieve the auction history for the logged-in user
      responses:
        '200':
          description: Auction history retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    leilao_id:
                      type: integer
                      description: ID of the auction
                    data_inicio:
                      type: string
                      format: date
                      description: Start date of the auction
                    data_fim:
                      type: string
                      format: date
                      description: End date of the auction
                    localizacao:
                      type: string
                      description: Location of the auction
                    valor_base:
                      type: number
                      description: Base value of the auction
                    data_pagamento:
                      type: string
                      format: date
                      description: Date of payment
                    valor:
                      type: number
                      description: Amount paid
                    objeto_descricao:
                      type: string
                      description: Description of the object auctioned
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
      security:
        - bearerAuth: []
  /users/user/role:
    get:
      summary: Check if the user is a cop or a regular user
      description: Returns the role (cop or regular user) and the Firebase UID of the logged-in user
      responses:
        '200':
          description: User role retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  isCop:
                    type: boolean
                    description: Indicates if the user is a cop
                  firebase_uid:
                    type: string
                    description: Firebase UID of the user
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
      security:
        - bearerAuth: []



components:
  schemas:
    PolicePost:
      type: object
      properties:
        name:
          type: string
        identifier:
          type: string 
        address:
          type: string

    Auction:
      type: object
      properties:
        auctionId: 
          type: integer 
        startingPrice:
          type: number
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time

    Bid:
      type: object
      properties:
        auctionID:
          type: integer 
        bidderID:
          type: integer 
        amount:
          type: number
        timestamp:
          type: string
          format: date-time

    User:
      type: object
      properties:
        userId: 
          type: integer 
        name:
          type: string
        email:
          type: string
        password:
          type: string

    LostItem:
      type: object
      properties:
        itemId: 
          type: integer 
        description:
          type: string
        category:
          type: string
        location:
          type: string
        dateLost:
          type: string
          format: date

    FoundItem:
      type: object
      properties:
        itemId: 
          type: integer 
        description:
          type: string
        location:
          type: string
        dateFound:
          type: string
          format: date

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

security:
  - ApiKeyAuth: []
